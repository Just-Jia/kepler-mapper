{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Confidence Graphs: Representing Model Uncertainty in Deep Learning \n",
    "\n",
    "**Hendrik Jacob van Veen** <br>\n",
    "<hendrik.vanveen@nubank.com.br> &bull; https://mlwave.com\n",
    "\n",
    "**Matheus Facure**<br>\n",
    "<matheus.facure@nubank.com.br> &bull; https://matheusfacure.github.io/\n",
    "\n",
    "## Introduction\n",
    "\n",
    "Variational inference [(MacKay, 2003)](http://www.inference.org.uk/mackay/itila/) gives a computationally tractible measure of uncertainty/confidence/variance for machine learning models, including complex black-box models, like those used in the fields of gradient boosting [(Chen et al, 2016)](https://dl.acm.org/citation.cfm?id=2939785) and deep learning [(Schmidhuber, 2014)](https://arxiv.org/abs/1404.7828).\n",
    "\n",
    "The $MAPPER$ algorithm [(Singh et al, 2007)](https://research.math.osu.edu/tgda/mapperPBG.pdf) \\[.pdf\\] from Topological Data Analysis [(Carlsson, 2009)](http://www.ams.org/journals/bull/2009-46-02/S0273-0979-09-01249-X/) turns any data or function output into a graph (or simplicial complex) which is used for data exploration [(Lum et al, 2009)](https://www.nature.com/articles/srep01236), error analysis [(Carlsson et al, 2018)](https://arxiv.org/abs/1803.00384), serving as input for higher-level machine learning algorithms [(Hofer et al, 2017)](https://arxiv.org/abs/1707.04041), and more.\n",
    "\n",
    "Dropout [(Srivastava et al, 2014)](http://jmlr.org/papers/v15/srivastava14a.html) can be viewed as an ensemble of many different sub-networks inside a single neural network, which, much like bootstrap aggregation of decision trees [(Breiman, 1996)](https://dl.acm.org/citation.cfm?id=231989), aims to combat overfit. Viewed as such, dropout is applicable as a Bayesian approximation [(Rubin, 1984)](https://projecteuclid.org/euclid.aos/1176346785) in the variational inference framework [(Gal, 2016)](http://www.cs.ox.ac.uk/people/yarin.gal/website/thesis/thesis.pdf) (.pdf)\n",
    "\n",
    "Interpretability is useful for detecting bias in and debugging errors of machine learning models. Many methods exist, such as tree paths [(Saabas, 2014)](http://blog.datadive.net/interpreting-random-forests/), saliency maps, permutation feature importance [(Altmann et al, 2010)](https://academic.oup.com/bioinformatics/article/26/10/1340/193348), locally-fit white box models [(van Veen, 2015)](https://github.com/MLWave/Black-Boxxy) [(Ribeiro et al, 2016)](https://arxiv.org/abs/1602.04938). More recent efforts aim to combine a variety of methods [(Korobov et al, 2016)](https://github.com/TeamHG-Memex/eli5) [(Olah et al, 2018)](https://distill.pub/2018/building-blocks/). \n",
    "\n",
    "## Motivation\n",
    "\n",
    "Error analysis surfaces different subsets/types of the data where a model makes fundamental errors. When building policies and making financial decisions based on the output of a model it is not only useful to study the errors of a model, but also the confidence:\n",
    "- Correct, but low-confidence, predictions for a cluster of data tells us where to focus our active learning [(Dasgupta et al, 2009)](http://hunch.net/~active_learning/) - and data collection efforts, so as to make the model more certain. \n",
    "- Incorrect, but high-confidence predictions, surface fundamental error types that can more readily be fixed by a correction layer [(Schapire, 1999)](http://rob.schapire.net/papers/Schapire99c.pdf) \\[.pdf\\], or redoing feature engineering [(Guyon et al, 2006)](https://dl.acm.org/citation.cfm?id=1208773).\n",
    "- Every profit-maximizing model has a prediction threshold where a decision is made [(Hardt et al, 2016)](https://arxiv.org/abs/1610.02413). However, given two equal predictions, the more confident predictions are preferred.\n",
    "- Interpretability methods have focussed either on explaining the model in general, or explaining a single sample. To our knowledge, not much focus has gone in a holistic view of modeled data, including explanations for subsets of similar samples (for whatever pragmatic definition of \"similar\", like \"similar age\", \"similar spend\", \"similar transaction behavior\"). The combination of interpretability and unsupervised exploratory analysis is attractive, because it catches unexpected behavior early on, as opposed to acting on faulty model output, and digging down to find a cause.\n",
    "\n",
    "\n",
    "## Experimental setup\n",
    "\n",
    "We will use the MNIST dataset [(LeCun et al, 1999)](http://yann.lecun.com/exdb/mnist/), Keras [(Chollet et al, 2015)](https://keras.io/) with TensorFlow [(Abadi et al, 2016)](https://arxiv.org/abs/1603.04467), NumPy [(van der Walt et al., 2011)](https://arxiv.org/abs/1102.1523), Pandas [(McKinney, 2010)](http://conference.scipy.org/proceedings/scipy2010/mckinney.html), Scikit-Learn [(Pedregosa et al, 2011)](http://scikit-learn.org/), Matplotlib [(Hunter, 2007)](https://matplotlib.org/), and KeplerMapper  [(Saul et al, 2017)](https://github.com/MLWave/kepler-mapper).\n",
    "\n",
    "- To classify between the digits 3 and 5, we will train a Multi-Layer Perceptron [(Ivakhnenko et al, 1965)](http://www.worldcat.org/title/cybernetic-predicting-devices/oclc/23815433) with 2 hidden layers, Backprop [(LeCun et al, 1998)](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf) (pdf), RELU activation [(Nair et al, 2010)](https://dl.acm.org/citation.cfm?id=3104425), ADAM optimizer [(Kingma et al, 2014)](https://arxiv.org/abs/1412.6980), dropout of 0.5, and softmax output, to classify between the digits 3 and 5.\n",
    "\n",
    "- We perform a 1000 forward passes to get the standard deviation and variance ratio of our predictions as per [(Gal, 2016, page 51)](http://www.cs.ox.ac.uk/people/yarin.gal/website/thesis/thesis.pdf) [.pdf].\n",
    "\n",
    "- Closely following the $FiFa$ method from [(Carlsson et al, 2018, page 4)](https://arxiv.org/abs/1803.00384) we then apply $MAPPER$ with the 2D filter function `[predicted probability(x), confidence(x)]` to project the data. We cover this projection with 10 10% overlapping intervals per dimension. We cluster with complete single-linkage agglomerative clustering (`n_clusters=3`) [(Ward, 1963)](https://www.jstor.org/stable/2282967) and use the penultimate layer as the inverse $X$. To guide exploration, we color the graph nodes by `mean absolute error(x)`.\n",
    "\n",
    "- We also ask predictions for the digit 4 which was never seen during training [(Larochelle et al, 2008)](https://dl.acm.org/citation.cfm?id=1620172), to see how this influences the confidence of the network, and to compare the graphs outputted by KeplerMapper.\n",
    "\n",
    "- For every graph node we show the original images. Binary classification on MNIST digits is easy enough to resort to a simple interpretability method to show what distinguishes the cluster from the rest of the data: We order each feature by z-score and highlight the top 10% features [(Singh, 2016)](https://www.ayasdi.com/blog/bigdata/5191-2/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import keras\n",
    "from keras import backend as K\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout\n",
    "from keras.optimizers import Adam\n",
    "\n",
    "import kmapper as km\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn import metrics, cluster, preprocessing\n",
    "import xgboost as xgb\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "plt.style.use(\"ggplot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing Data\n",
    "\n",
    "We create train and test data sets for the digits 3, 4, and 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(11552, 'train samples')\n",
      "(1902, 'test samples')\n",
      "(1902, 'strange samples')\n",
      "(0.53101997896950581, 'y test mean')\n"
     ]
    }
   ],
   "source": [
    "# get the data, shuffled and split between train and test sets\n",
    "(X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
    "\n",
    "X_strange = X_train[y_train == 4]\n",
    "y_strange = y_train[y_train == 4]\n",
    "\n",
    "X_train = X_train[np.logical_or(y_train == 3, y_train == 5)]\n",
    "y_train = y_train[np.logical_or(y_train == 3, y_train == 5)]\n",
    "\n",
    "X_test = X_test[np.logical_or(y_test == 3, y_test == 5)]\n",
    "y_test = y_test[np.logical_or(y_test == 3, y_test == 5)]\n",
    "\n",
    "X_strange = X_strange[:X_test.shape[0]]\n",
    "y_strange = y_strange[:X_test.shape[0]]\n",
    "\n",
    "X_train = X_train.reshape(-1, 784)\n",
    "X_test = X_test.reshape(-1, 784)\n",
    "X_strange = X_strange.reshape(-1, 784)\n",
    "\n",
    "X_train = X_train.astype('float32')\n",
    "X_test = X_test.astype('float32')\n",
    "X_strange = X_strange.astype('float32')\n",
    "\n",
    "X_train /= 255\n",
    "X_test /= 255\n",
    "X_strange /= 255\n",
    "\n",
    "print(X_train.shape[0], 'train samples')\n",
    "print(X_test.shape[0], 'test samples')\n",
    "print(X_strange.shape[0], 'strange samples')\n",
    "\n",
    "# convert class vectors to binary class matrices\n",
    "y_train = (y_train == 3).astype(int)\n",
    "y_test = (y_test == 3).astype(int)\n",
    "\n",
    "y_mean_test = y_test.mean()\n",
    "print(y_mean_test, 'y test mean')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model\n",
    "Model is a basic 2-hidden layer MLP with RELU activation, ADAM optimizer, and softmax output. Dropout is applied to every layer but the final."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dropout_1 (Dropout)          (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 512)               401920    \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 512)               262656    \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 1)                 513       \n",
      "=================================================================\n",
      "Total params: 665,089\n",
      "Trainable params: 665,089\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "batch_size = 128\n",
    "num_classes = 1\n",
    "epochs = 10\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dropout(0.5, input_shape=(784,)))\n",
    "model.add(Dense(512, activation='relu', input_shape=(784,)))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(512, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(num_classes, activation='sigmoid'))\n",
    "\n",
    "model.summary()\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer=Adam(),\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting and evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 11552 samples, validate on 1902 samples\n",
      "Epoch 1/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.2515 - acc: 0.8894 - val_loss: 0.0801 - val_acc: 0.9674\n",
      "Epoch 2/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.1373 - acc: 0.9462 - val_loss: 0.0590 - val_acc: 0.9732\n",
      "Epoch 3/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.1030 - acc: 0.9603 - val_loss: 0.0426 - val_acc: 0.9842\n",
      "Epoch 4/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0842 - acc: 0.9681 - val_loss: 0.0353 - val_acc: 0.9890\n",
      "Epoch 5/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0803 - acc: 0.9703 - val_loss: 0.0344 - val_acc: 0.9911\n",
      "Epoch 6/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0736 - acc: 0.9730 - val_loss: 0.0323 - val_acc: 0.9895\n",
      "Epoch 7/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0709 - acc: 0.9739 - val_loss: 0.0304 - val_acc: 0.9911\n",
      "Epoch 8/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0636 - acc: 0.9750 - val_loss: 0.0302 - val_acc: 0.9911\n",
      "Epoch 9/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0551 - acc: 0.9787 - val_loss: 0.0226 - val_acc: 0.9921\n",
      "Epoch 10/10\n",
      "11552/11552 [==============================] - 1s - loss: 0.0579 - acc: 0.9775 - val_loss: 0.0256 - val_acc: 0.9942\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train,\n",
    "                    batch_size=batch_size,\n",
    "                    epochs=epochs,\n",
    "                    verbose=1,\n",
    "                    validation_data=(X_test, y_test))\n",
    "score = model.evaluate(X_test, y_test, verbose=0)\n",
    "score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perform 1000 forward passes on test set and calculate Variance Ratio and Standard Dev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.992639327024\n",
      "               STD           VR       y_pred       y_true\n",
      "count  1902.000000  1902.000000  1902.000000  1902.000000\n",
      "mean      0.058847     0.022416     0.526835     0.531020\n",
      "std       0.076398     0.068770     0.470992     0.499168\n",
      "min       0.000010     0.000000     0.000001     0.000000\n",
      "25%       0.006853     0.000000     0.003618     0.000000\n",
      "50%       0.027729     0.001000     0.827619     1.000000\n",
      "75%       0.078156     0.007000     0.994060     1.000000\n",
      "max       0.354404     0.497000     0.999995     1.000000\n"
     ]
    }
   ],
   "source": [
    "FP = 1000\n",
    "predict_stochastic = K.function([model.layers[0].input, K.learning_phase()], [model.layers[-1].output])\n",
    "\n",
    "y_pred_test = np.array([predict_stochastic([X_test, 1]) for _ in range(FP)])\n",
    "y_pred_stochastic_test = y_pred_test.reshape(-1,y_test.shape[0]).T\n",
    "\n",
    "y_pred_std_test = np.std(y_pred_stochastic_test, axis=1)\n",
    "y_pred_mean_test = np.mean(y_pred_stochastic_test, axis=1)\n",
    "y_pred_mode_test = (np.mean(y_pred_stochastic_test > .5, axis=1) > .5).astype(int).reshape(-1,1)\n",
    "\n",
    "y_pred_var_ratio_test = 1 - np.mean((y_pred_stochastic_test > .5) == y_pred_mode_test, axis=1)\n",
    "\n",
    "test_analysis = pd.DataFrame({\n",
    "    \"y_true\": y_test,\n",
    "    \"y_pred\": y_pred_mean_test,\n",
    "    \"VR\": y_pred_var_ratio_test,\n",
    "    \"STD\": y_pred_std_test\n",
    "})\n",
    "\n",
    "print(metrics.accuracy_score(y_true=y_test, y_pred=y_pred_mean_test > .5))\n",
    "print(test_analysis.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot test set confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n2P7DP/wDX/va12hsbGRmZob77ruPffv2lWtsIiIiIiIixVOMUJpnayBXWwOtq2WD7Q9+8AP+8A//\nkIGBAX7+85/zve99T8FWRERERETKrijzWosRSrU1UEVadlXk0dFRBgYGABgYGGB4eLgsgxIRERER\nEUnLtBBPjGMl5yDdQjwbW9kLRSKZVZ3TXMcxQdmrXCtG18jq0NXM03Y/AJZlaXsfEREREREpvxwt\nxKRbiFeiCKFUWwNVpmVbkWOxGB/72Mcy38/MzGR9D/DVr361NCMTEREREZGiydXKWzWK0EKcPn83\nEICJK7gtbVgtratqaV7J1kBSHssG2wceeKBc4xARERERkRLJuxpwZ9d6D82bNc5rXXj+tm3jtrRl\nKrWqtNaGZYPttddeW65xiIiIiIhIqeRZDXju7EnoqoItPXv74OggbjqYr7SFWFv01LyC+9iKiIiI\niEiVy9vKO7NOA1oZOxTG2TNgWomjUVOpXUm1VVv01DwFWxERERGRWpenldeKNKzjoFZmTfNatUVP\nzfO8KrKIiIiIiFSpPKsB+3fsXOeBlYm26Kl5CrYiIiIiIjUu7xY14fpYOElb9NS+vK3IjzzyCJZl\nFXyBT37yk0UdkIiIiIiIFF+9b1FT6+efazunegrueSu2mzZtoru7m+7ubhoaGhgcHMRxHDo6OnAc\nh8HBQRoaqqcnX0REREREpBZltjOaGMdKzkF6O6fZ2HoPrWzyVmzvuuuuzNcPPvgg/+W//BeuuWb+\nE46XXnqJ733ve6UdnYiIiIiIiCxP2xl5m2N74sQJdu7Mnlh+9dVXc+LEiZIMSkRERERERDzKs50R\ndbSdkadg29fXx3e+8x3i8TgA8Xic//2//zc7duwo5dhERERERESkkEgks+Jzmus4Zq5tnfC0j+3H\nP/5x/vt//+98+MMfpqmpiampKfr7+/nUpz5V6vGJiIiIiIjIcnr74OggbqoduR63M/IUbDdu3Mif\n/umfMjw8zNjYGO3t7XR1dZV6bCIiIiIisg7qfYXdamOHwjh7BuDcGdxoFJrq7555CrYAk5OTvPji\ni4yNjfHBD36Q0dFRXNels7OzlOMTEREREZEyyqywm67+pVfY1b6vFa3WtzMqxNMc2xdffJE/+IM/\n4PDhw5mVkC9evMg3vvGNkg5ORERERETKLMcKu6RX2BWpUJ4qtv/zf/5P/uAP/oDrr7+ej370o4BZ\n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\nBjj0Czst9+zJ9NY9BmobYN1GCIVt0GxsxqmtwzS34/SezQmRQN5gOW3gzMN77478t7/upmlfksKo\niIiIiIhMxzH5eoAXwZ49e3j00UfxPI+bbrqJ22+/nSeeeILNmzezc+dO4vE4Dz74IMeOHaO6upo7\n77wzM2xqOmfPni3B0S+s5d4usBLoHFY+ncPKp3NY+XQOK5/OYeXTOax8y/0cllUrMsA111zDNddc\nk3PZpz/96cy/g8Egv/M7v1OqwxEREREREZFlwl3qAxARERERERGZDwVbERERERERqWgKtiIiIiIi\nIlLRFGxFRERERESkoinYioiIiIiISEVTsBUREREREZGKpmArIiIiIiIiFU3BVkRERERERCqagq2I\niIiIiIhUNAVbERERERERqWgKtiIiIiIiIlLRFGxFRERERESkoinYioiIiIiISEVTsBUREREREZGK\npmArIiIiIiIiFU3BVkRERERERCqaY4wxS30QIiIiIiIiInOliu0SuOeee5b6EGSedA4rn85h5dM5\nrHw6h5VP57Dy6RxWPp1DS8FWREREREREKpqCrYiIiIiIiFQ039e//vWvL/VBrESbNm1a6kOQedI5\nrHw6h5VP57Dy6RxWPp3DyqdzWPl0DjU8SkRERERERCqcWpFFRERERESkoinYioiIiIiISEXzL/UB\nLDd79+7l4YcfxvM8br75Zm677bac6xOJBA8++CBHjx6lpqaGO++8k5aWFgCefPJJnn32WVzX5fOf\n/zzbt29fipew4s31HPb09PDlL3+Z9vZ2ALZs2cJv/uZvLsVLWPFmOof79+/n0Ucf5cSJE9x5551c\nd911meuee+45fvCDHwBw++2386EPfaiUhy5p8zmHn/70p1m/fj0ATU1N3H333SU9drFmOodPPfUU\nzzzzDD6fj9raWn7rt36L5uZmQJ/DcjCf86fPYPmY6Tz+8z//Mz/5yU9wXZdwOMx/+A//gY6ODkC/\nl5aDuZ6/Ffs7qZEFk0qlzK5du8y5c+dMIpEwX/nKV8ypU6dybvPjH//YfOc73zHGGPPiiy+a+++/\n3xhjzKlTp8xXvvIVE4/HTXd3t9m1a5dJpVIlfw0r3XzOYXd3t/md3/mdkh+z5CrmHHZ3d5vjx4+b\nBx54wLzyyiuZy4eHh82XvvQlMzw8nPNvKa35nENjjPnMZz5TysOVPIo5h2+99ZaJxWLGGGN+8pOf\n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\n5I033mBkZCRzXUdHB//+3/97tm7dymOPPcYjjzwCQCgUYteuXTz88MPcc889/PSnP+Vf/uVfch73\nnXfe4Vvf+ha///u/z/e//31Onz4NwP/7f/+P7u5uHnjgAe69916ef/75nPu1trbyX//rf+WRRx7h\njjvu4IEHHuD8+fOZ6w8dOkRrayt/+Zd/ye23387TTz/Nnj17+OY3v8l9993Hz3/+81m/B5dccgkN\nDQ288847APz1X/81XV1d/PEf/zF//ud/zsDAAN///vcBuPHGG3nppZcy9923bx81NTVs2rRpyuPW\n1dVx99138+ijj/LFL36RRx99lKNHjxIOh/na175GfX09jz32GI899hgNDQ059z179izf+ta3+Nzn\nPsdf/uVfcvXVV/PNb36TZDKZuc0rr7zC1772Nf7iL/6CkydP8txzz836tYuIiCjYiohIxauqquIP\n//APcRyH73znO3zhC1/gm9/8JhcuXCh4n8svv5z169fjui4bNmzgxhtvZP/+/Tm3ueOOOwgGg3R2\ndrJhwwZOnDgB2DB2++23U11dTVNTE7feemvO/a6//noaGhpwXZcbbriBtrY2Dh8+nLm+vr6eW2+9\nFZ/PRzAY5JVXXuHf/Jt/Q1NTE9XV1dx2221zeh8aGhoYGRnBGMMzzzzDZz/7Waqrq4lEItx+++2Z\nMPv+97+f1157jbGxMQBefPHFTLV7smuuuYa2tjYcx2Hbtm1ceeWVmfA8k5dffpmrr76aK6+8Er/f\nzy//8i8Tj8c5ePBg5ja33norDQ0NVFdXs2PHDo4fPz6n1y4iIiubWpFFRGRZ6Ojo4Etf+hIAZ86c\n4YEHHuCRRx7hzjvvzHv7Q4cO8Td/8zecPHmSZDJJMpnkuuuuy7nN6tWrM/8OhULEYjEAzp8/T2Nj\nY+a6pqamnPs9//zzPPXUU/T29gIQi8UYHh4uePvz58/nXNbc3Fz06842MDBAdXU1Q0NDjI2Ncc89\n92SuM8ZkJh23tbWxdu1aXn/9dXbs2MFrr73G//gf/yPvY77xxht8//vf5+zZsxhjGBsbY/369UUd\nz/nz53Nei+u6NDU1MTAwkLks+z0OBoM514mIiBRLwVZERJadtWvX8qEPfYif/vSnBW/z53/+53z0\nox/lq1/9KsFgkEceeYShoaGiHn/16tX09/ezbt06wG6RM663t5fvfOc7/MEf/AFbt27FdV1+93d/\nF2NMwcerr6/PeYzsfxfr8OHDDAwM8J73vIeamhqCwSD333//lPbgcTfeeCMvvvginufR0dFBW1vb\nlNskEgn+9E//lF27drFz5078fn9OAHYcZ9pjqq+v5+TJk5nvjTH09fUVPCYREZG5UiuyiIhUvDNn\nzvAP//AP9Pf3AzYYvvTSS2zZsgWwQXRgYCBnbWc0GqW6uppgMMjhw4d58cUXi36+66+/nieffJKR\nkRH6+/v58Y9/nLlubGwMx3Gora0F4Gc/+xmnTp2a8fF+9KMf0d/fz8jICD/84Q+LPpbR0VFef/11\nvvWtb/Gv//W/zrRX33zzzTzyyCMMDg4Ctpq7d+/ezP1uvPFG3nzzTX76058WbENOJpMkEglqa2vx\n+Xy88cYbvPnmm5nr6+rqGB4eZnR0NO/9b7jhBt544w3eeustkskk//AP/0AgEODSSy8t+vWJiIgU\nQxVbERGpeJFIhEOHDvHUU08xOjpKVVUVO3bs4DOf+QwAV1xxRWaIlOu6fPe73+ULX/gCf/VXf8X3\nvvc9tm3bxvXXX8/FixeLer477riDhx56iF27dlFfX89NN93EP/3TPwG2JfoTn/gE9957L67r8oEP\nfGDGIHfzzTdz9uxZfvd3f5dIJMIv//Iv8/bbb097n29+85v4fD4cx6Gjo4OPf/zj/NIv/VLm+l/7\ntV/j+9//Pvfeey/Dw8M0NDTwkY98hO3btwO2mrp161b279/Pl7/85YLv6+c//3n+7M/+jEQiwY4d\nO9i5c2fm+rVr13LjjTeya9cuPM/j/vvvz7l/e3s7/+k//Se+973vZaYi33333fj9+vVDREQWlmOm\n640SERERERERKXNqRRYREREREZGKpmArIiIiIiIiFU3BVkRERERERCqagq2IiIiIiIhUNAVbERER\nERERqWgKtiIiIiIiIlLRFGxFRERERESkoinYioiIiIiISEX7/wFAgyjAKhcZdAAAAABJRU5ErkJg\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12747abd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n7t3L1VdfzebNm3Fdlw0bNlBTU8OhQ4fGfc7vfe973HHHHXz961+noKAgnpFN9BnHc+jQISoqKrjp\nppvw+Xz8wR/8AZWVlbz11lsJvV9ERGQ2KGMrIiIL2pVXXkk4HObAgQOsXLmSkydP8pd/+Zfx10+c\nOMELL7zA2bNniUajRKNRtm3bNuwexcXF497/7bff5pe//CX19fUYY+jr62Pp0qXx1/Pz84ed5Q0G\ng/T29tLR0UEkEqGiomLUPZubm9m/f/+w4DEWi01YivxXf/VXbNiwgWPHjvHDH/6Qjo4OcnNzE37G\n8bS2tlJaWjrsZ6WlpbS2tib0fhERkdmgwFZERBa8wSZS9fX1bNy4kcLCwvhrP/rRj/jjP/5jvvnN\nbxIIBHjmmWdob28f9n7Hcca8byQS4dFHH2Xnzp1s3boVv9/Pd7/73YTWlJ+fT1ZWFhcuXIiXRQ8q\nLi7mxhtv5Gtf+9rUHhRYu3YtN998M8899xy7d++e9BnHe7ZBRUVFvPnmm8N+1tzczKZNm6a8NhER\nkelSKbKIiCx4N910E0eOHOGll14aVoYM0NPTQ15eHoFAgJMnT/Laa68lfN9oNEokEiEcDuPz+Xj7\n7bc5cuRIQu91XZft27fz3HPP0draiud5fPjhh0QiEW688UbeeustDh8+jOd59Pf3895779HS0pLQ\nvW+99VaOHj0abyA10TOGw2Ecx6GhoWHMe1199dWcP3+e1157jVgsxhtvvEFdXR2bN29OaC0iIiKz\nQRlbERFZ8MrKyli9ejUfffQRW7duHfbaV77yFZ577jl++tOfsnbtWq677jq6uroSum92djZ33XUX\njz32GJFIhC1btoy6/0TuuOMOXnjhBb75zW/S29tLdXU13/rWtygpKWH37t388z//Mz/84Q9xXZeV\nK1fyF3/xFwndNxwOc9NNN/HLX/6Se+65Z8JnDAaDfO5zn+OBBx4gFotx//33D7tXfn4+9913H08/\n/TRPPfUUFRUV3HfffZM2sRIREZlNjhk5vE9EREREREQkjagUWURERERERNKaAlsRERERERFJawps\nRUREREREJK0psBUREREREZG0psBWRERERERE0poCWxEREREREUlrCmxFREREREQkrSmwFRERERER\nkbT2/wH7qHjefP5VDQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11cd04d50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prediction_cut_off = (test_analysis.y_pred < .96) & (test_analysis.y_pred > .94)\n",
    "std_diff = test_analysis.STD[prediction_cut_off].max() - test_analysis.STD[prediction_cut_off].min() \n",
    "vr_diff = test_analysis.VR[prediction_cut_off].max() - test_analysis.VR[prediction_cut_off].min() \n",
    "num_preds = test_analysis.STD[prediction_cut_off].shape[0]\n",
    "\n",
    "# STD plot\n",
    "plt.figure(figsize=(16,8))\n",
    "plt.suptitle(\"Standard Deviation of Test Predictions\", fontsize=18, weight=\"bold\")\n",
    "plt.title(\"For the %d predictions between 0.94 and 0.96 the STD varies with %f\"%(num_preds, std_diff),\n",
    "         style=\"italic\")\n",
    "plt.xlabel(\"Standard Deviation\")\n",
    "plt.ylabel(\"Predicted Probability\")\n",
    "plt.scatter(test_analysis.STD, test_analysis.y_pred, alpha=.3)\n",
    "plt.scatter(test_analysis.STD[prediction_cut_off],\n",
    "            test_analysis.y_pred[prediction_cut_off])\n",
    "plt.show()\n",
    "\n",
    "# VR plot\n",
    "plt.figure(figsize=(16,8))\n",
    "plt.suptitle(\"Variance Ratio of Test Predictions\", fontsize=18, weight=\"bold\")\n",
    "plt.title(\"For the %d predictions between 0.94 and 0.96 the Variance Ratio varies with %f\"%(num_preds, vr_diff),\n",
    "         style=\"italic\")\n",
    "plt.xlabel(\"Variance Ratio\")\n",
    "plt.ylabel(\"Predicted Probability\")\n",
    "plt.scatter(test_analysis.VR, test_analysis.y_pred, alpha=.3)\n",
    "plt.scatter(test_analysis.VR[prediction_cut_off],\n",
    "            test_analysis.y_pred[prediction_cut_off])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply $MAPPER$\n",
    "\n",
    "### Take penultimate layer activations from test set for the inverse $X$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((1902, 512), 'X_inverse_test shape')\n"
     ]
    }
   ],
   "source": [
    "predict_penultimate_layer =  K.function([model.layers[0].input, K.learning_phase()], [model.layers[-2].output])\n",
    "\n",
    "X_inverse_test = np.array(predict_penultimate_layer([X_test, 1]))[0]\n",
    "print((X_inverse_test.shape, \"X_inverse_test shape\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Take STD and error as the projected $X$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((1902, 2), 'X_projected_test shape')\n"
     ]
    }
   ],
   "source": [
    "X_projected_test = np.c_[test_analysis.STD, test_analysis.y_true - test_analysis.y_pred]\n",
    "print((X_projected_test.shape, \"X_projected_test shape\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the confidence graph $G$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mapping on data shaped (1902, 512) using lens shaped (1902, 2)\n",
      "\n",
      "Minimal points in hypercube before clustering: 2\n",
      "Creating 100 hypercubes.\n",
      "There are 0 points in cube_0 / 100\n",
      "Cube_0 is empty.\n",
      "\n",
      "There are 0 points in cube_1 / 100\n",
      "Cube_1 is empty.\n",
      "\n",
      "There are 0 points in cube_2 / 100\n",
      "Cube_2 is empty.\n",
      "\n",
      "There are 0 points in cube_3 / 100\n",
      "Cube_3 is empty.\n",
      "\n",
      "There are 1344 points in cube_4 / 100\n",
      "Found 2 clusters in cube_4\n",
      "\n",
      "There are 1344 points in cube_5 / 100\n",
      "Found 2 clusters in cube_5\n",
      "\n",
      "There are 0 points in cube_6 / 100\n",
      "Cube_6 is empty.\n",
      "\n",
      "There are 0 points in cube_7 / 100\n",
      "Cube_7 is empty.\n",
      "\n",
      "There are 0 points in cube_8 / 100\n",
      "Cube_8 is empty.\n",
      "\n",
      "There are 0 points in cube_9 / 100\n",
      "Cube_9 is empty.\n",
      "\n",
      "There are 0 points in cube_10 / 100\n",
      "Cube_10 is empty.\n",
      "\n",
      "There are 0 points in cube_11 / 100\n",
      "Cube_11 is empty.\n",
      "\n",
      "There are 0 points in cube_12 / 100\n",
      "Cube_12 is empty.\n",
      "\n",
      "There are 0 points in cube_13 / 100\n",
      "Cube_13 is empty.\n",
      "\n",
      "There are 462 points in cube_14 / 100\n",
      "Found 2 clusters in cube_14\n",
      "\n",
      "There are 453 points in cube_15 / 100\n",
      "Found 2 clusters in cube_15\n",
      "\n",
      "There are 0 points in cube_16 / 100\n",
      "Cube_16 is empty.\n",
      "\n",
      "There are 0 points in cube_17 / 100\n",
      "Cube_17 is empty.\n",
      "\n",
      "There are 0 points in cube_18 / 100\n",
      "Cube_18 is empty.\n",
      "\n",
      "There are 0 points in cube_19 / 100\n",
      "Cube_19 is empty.\n",
      "\n",
      "There are 0 points in cube_20 / 100\n",
      "Cube_20 is empty.\n",
      "\n",
      "There are 0 points in cube_21 / 100\n",
      "Cube_21 is empty.\n",
      "\n",
      "There are 0 points in cube_22 / 100\n",
      "Cube_22 is empty.\n",
      "\n",
      "There are 1 points in cube_23 / 100\n",
      "Cube_23 is empty.\n",
      "\n",
      "There are 254 points in cube_24 / 100\n",
      "Found 2 clusters in cube_24\n",
      "\n",
      "There are 211 points in cube_25 / 100\n",
      "Found 2 clusters in cube_25\n",
      "\n",
      "There are 0 points in cube_26 / 100\n",
      "Cube_26 is empty.\n",
      "\n",
      "There are 0 points in cube_27 / 100\n",
      "Cube_27 is empty.\n",
      "\n",
      "There are 0 points in cube_28 / 100\n",
      "Cube_28 is empty.\n",
      "\n",
      "There are 0 points in cube_29 / 100\n",
      "Cube_29 is empty.\n",
      "\n",
      "There are 1 points in cube_30 / 100\n",
      "Cube_30 is empty.\n",
      "\n",
      "There are 0 points in cube_31 / 100\n",
      "Cube_31 is empty.\n",
      "\n",
      "There are 0 points in cube_32 / 100\n",
      "Cube_32 is empty.\n",
      "\n",
      "There are 15 points in cube_33 / 100\n",
      "Found 2 clusters in cube_33\n",
      "\n",
      "There are 124 points in cube_34 / 100\n",
      "Found 2 clusters in cube_34\n",
      "\n",
      "There are 86 points in cube_35 / 100\n",
      "Found 2 clusters in cube_35\n",
      "\n",
      "There are 1 points in cube_36 / 100\n",
      "Cube_36 is empty.\n",
      "\n",
      "There are 0 points in cube_37 / 100\n",
      "Cube_37 is empty.\n",
      "\n",
      "There are 0 points in cube_38 / 100\n",
      "Cube_38 is empty.\n",
      "\n",
      "There are 0 points in cube_39 / 100\n",
      "Cube_39 is empty.\n",
      "\n",
      "There are 1 points in cube_40 / 100\n",
      "Cube_40 is empty.\n",
      "\n",
      "There are 0 points in cube_41 / 100\n",
      "Cube_41 is empty.\n",
      "\n",
      "There are 0 points in cube_42 / 100\n",
      "Cube_42 is empty.\n",
      "\n",
      "There are 35 points in cube_43 / 100\n",
      "Found 2 clusters in cube_43\n",
      "\n",
      "There are 69 points in cube_44 / 100\n",
      "Found 2 clusters in cube_44\n",
      "\n",
      "There are 60 points in cube_45 / 100\n",
      "Found 2 clusters in cube_45\n",
      "\n",
      "There are 12 points in cube_46 / 100\n",
      "Found 2 clusters in cube_46\n",
      "\n",
      "There are 0 points in cube_47 / 100\n",
      "Cube_47 is empty.\n",
      "\n",
      "There are 0 points in cube_48 / 100\n",
      "Cube_48 is empty.\n",
      "\n",
      "There are 0 points in cube_49 / 100\n",
      "Cube_49 is empty.\n",
      "\n",
      "There are 0 points in cube_50 / 100\n",
      "Cube_50 is empty.\n",
      "\n",
      "There are 0 points in cube_51 / 100\n",
      "Cube_51 is empty.\n",
      "\n",
      "There are 5 points in cube_52 / 100\n",
      "Found 2 clusters in cube_52\n",
      "\n",
      "There are 43 points in cube_53 / 100\n",
      "Found 2 clusters in cube_53\n",
      "\n",
      "There are 41 points in cube_54 / 100\n",
      "Found 2 clusters in cube_54\n",
      "\n",
      "There are 57 points in cube_55 / 100\n",
      "Found 2 clusters in cube_55\n",
      "\n",
      "There are 28 points in cube_56 / 100\n",
      "Found 2 clusters in cube_56\n",
      "\n",
      "There are 0 points in cube_57 / 100\n",
      "Cube_57 is empty.\n",
      "\n",
      "There are 0 points in cube_58 / 100\n",
      "Cube_58 is empty.\n",
      "\n",
      "There are 0 points in cube_59 / 100\n",
      "Cube_59 is empty.\n",
      "\n",
      "There are 1 points in cube_60 / 100\n",
      "Cube_60 is empty.\n",
      "\n",
      "There are 1 points in cube_61 / 100\n",
      "Cube_61 is empty.\n",
      "\n",
      "There are 10 points in cube_62 / 100\n",
      "Found 2 clusters in cube_62\n",
      "\n",
      "There are 31 points in cube_63 / 100\n",
      "Found 2 clusters in cube_63\n",
      "\n",
      "There are 15 points in cube_64 / 100\n",
      "Found 2 clusters in cube_64\n",
      "\n",
      "There are 29 points in cube_65 / 100\n",
      "Found 2 clusters in cube_65\n",
      "\n",
      "There are 28 points in cube_66 / 100\n",
      "Found 2 clusters in cube_66\n",
      "\n",
      "There are 2 points in cube_67 / 100\n",
      "Found 2 clusters in cube_67\n",
      "\n",
      "There are 0 points in cube_68 / 100\n",
      "Cube_68 is empty.\n",
      "\n",
      "There are 1 points in cube_69 / 100\n",
      "Cube_69 is empty.\n",
      "\n",
      "There are 1 points in cube_70 / 100\n",
      "Cube_70 is empty.\n",
      "\n",
      "There are 4 points in cube_71 / 100\n",
      "Found 2 clusters in cube_71\n",
      "\n",
      "There are 19 points in cube_72 / 100\n",
      "Found 2 clusters in cube_72\n",
      "\n",
      "There are 21 points in cube_73 / 100\n",
      "Found 2 clusters in cube_73\n",
      "\n",
      "There are 3 points in cube_74 / 100\n",
      "Found 2 clusters in cube_74\n",
      "\n",
      "There are 17 points in cube_75 / 100\n",
      "Found 2 clusters in cube_75\n",
      "\n",
      "There are 26 points in cube_76 / 100\n",
      "Found 2 clusters in cube_76\n",
      "\n",
      "There are 15 points in cube_77 / 100\n",
      "Found 2 clusters in cube_77\n",
      "\n",
      "There are 7 points in cube_78 / 100\n",
      "Found 2 clusters in cube_78\n",
      "\n",
      "There are 1 points in cube_79 / 100\n",
      "Cube_79 is empty.\n",
      "\n",
      "There are 0 points in cube_80 / 100\n",
      "Cube_80 is empty.\n",
      "\n",
      "There are 9 points in cube_81 / 100\n",
      "Found 2 clusters in cube_81\n",
      "\n",
      "There are 24 points in cube_82 / 100\n",
      "Found 2 clusters in cube_82\n",
      "\n",
      "There are 14 points in cube_83 / 100\n",
      "Found 2 clusters in cube_83\n",
      "\n",
      "There are 1 points in cube_84 / 100\n",
      "Cube_84 is empty.\n",
      "\n",
      "There are 6 points in cube_85 / 100\n",
      "Found 2 clusters in cube_85\n",
      "\n",
      "There are 19 points in cube_86 / 100\n",
      "Found 2 clusters in cube_86\n",
      "\n",
      "There are 22 points in cube_87 / 100\n",
      "Found 2 clusters in cube_87\n",
      "\n",
      "There are 10 points in cube_88 / 100\n",
      "Found 2 clusters in cube_88\n",
      "\n",
      "There are 0 points in cube_89 / 100\n",
      "Cube_89 is empty.\n",
      "\n",
      "There are 0 points in cube_90 / 100\n",
      "Cube_90 is empty.\n",
      "\n",
      "There are 6 points in cube_91 / 100\n",
      "Found 2 clusters in cube_91\n",
      "\n",
      "There are 9 points in cube_92 / 100\n",
      "Found 2 clusters in cube_92\n",
      "\n",
      "There are 2 points in cube_93 / 100\n",
      "Found 2 clusters in cube_93\n",
      "\n",
      "There are 0 points in cube_94 / 100\n",
      "Cube_94 is empty.\n",
      "\n",
      "There are 0 points in cube_95 / 100\n",
      "Cube_95 is empty.\n",
      "\n",
      "There are 5 points in cube_96 / 100\n",
      "Found 2 clusters in cube_96\n",
      "\n",
      "There are 9 points in cube_97 / 100\n",
      "Found 2 clusters in cube_97\n",
      "\n",
      "There are 5 points in cube_98 / 100\n",
      "Found 2 clusters in cube_98\n",
      "\n",
      "There are 0 points in cube_99 / 100\n",
      "Cube_99 is empty.\n",
      "\n",
      "\n",
      "Created 251 edges and 90 nodes in 0:00:01.157127.\n"
     ]
    }
   ],
   "source": [
    "mapper = km.KeplerMapper(verbose=2)\n",
    "G = mapper.map(X_projected_test,\n",
    "               X_inverse_test,\n",
    "               clusterer=cluster.AgglomerativeClustering(n_clusters=2),\n",
    "               overlap_perc=0.8,\n",
    "               nr_cubes=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create color function output (absolute error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "color_function_output = np.sqrt((y_test-test_analysis.y_pred)**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create image tooltips for samples that are interpretable for humans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hendrikvanveen/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:11: RuntimeWarning: invalid value encountered in divide\n"
     ]
    }
   ],
   "source": [
    "import io\n",
    "import base64\n",
    "from scipy.misc import toimage, imsave, imresize\n",
    "\n",
    "# Create z-scores\n",
    "hard_predictions = (test_analysis.y_pred > 0.5).astype(int)\n",
    "\n",
    "o = np.std(X_test, axis=0)\n",
    "u = np.mean(X_test[hard_predictions == 0], axis=0)\n",
    "v = np.mean(X_test[hard_predictions == 1], axis=0)\n",
    "z_scores = (u-v)/o\n",
    "\n",
    "scores_0 = sorted([(score,i) for i, score in enumerate(z_scores) if str(score) != \"nan\"],\n",
    "               reverse=False)\n",
    "scores_1 = sorted([(score,i) for i, score in enumerate(z_scores) if str(score) != \"nan\"],\n",
    "               reverse=True)\n",
    "\n",
    "# Fill RGBA image array with top 200 scores for positive and negative\n",
    "img_array_0 = np.zeros((28,28,4))\n",
    "img_array_1 = np.zeros((28,28,4))\n",
    "\n",
    "for e, (score, i) in enumerate(scores_0[:200]):\n",
    "    y = i % 28\n",
    "    x = (i - (i % 28))/28\n",
    "    img_array_0[x][y] = [255,255,0,205-e]\n",
    "    \n",
    "for e, (score, i) in enumerate(scores_1[:200]):\n",
    "    y = i % 28\n",
    "    x = (i - (i % 28))/28\n",
    "    img_array_1[x][y] = [255,0,0,205-e]\n",
    "\n",
    "img_array = (img_array_0 + img_array_1) / 2\n",
    "\n",
    "# Get base64 encoded version of this\n",
    "output = io.BytesIO()\n",
    "img = imresize(img_array, (64,64))\n",
    "img = toimage(img)\n",
    "\n",
    "img.save(output, format=\"PNG\")\n",
    "contents = output.getvalue()\n",
    "explanation_img_encoded = base64.b64encode(contents)    \n",
    "output.close()\n",
    "\n",
    "# Create tooltips for each digit\n",
    "tooltip_s = []\n",
    "for ys, image_data in zip(y_test, X_test):\n",
    "    output = io.BytesIO()\n",
    "    img = toimage(imresize(image_data.reshape((28,28)), (64,64))) # Data was a flat row of \"pixels\".\n",
    "    img.save(output, format=\"PNG\")\n",
    "    contents = output.getvalue()\n",
    "    img_encoded = base64.b64encode(contents)\n",
    "    img_tag = \"\"\"<div style=\"width:71px;\n",
    "                             height:71px;\n",
    "                             overflow:hidden;\n",
    "                             float:left;\n",
    "                             position: relative;\">\n",
    "                 <img src=\"data:image/png;base64,%s\" style=\"position:absolute; top:0; right:0\" />\n",
    "                 <img src=\"data:image/png;base64,%s\" style=\"position:absolute; top:0; right:0;\n",
    "                                                            opacity:0.5; width: 64px; height: 64px;\" />\n",
    "                 <div style=\"position: absolute; top: 0; left: 1px; font-size:9px\">%s</div>\n",
    "                 </div>\"\"\"%((img_encoded.decode('utf-8'),\n",
    "                             explanation_img_encoded.decode('utf-8'),\n",
    "                             ys))\n",
    "    tooltip_s.append(img_tag)\n",
    "    output.close()\n",
    "tooltip_s = np.array(tooltip_s)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote visualization to: mapper_visualization_output.html\n"
     ]
    }
   ],
   "source": [
    "_ = mapper.visualize(G,\n",
    "                 projected_X=X_projected_test,\n",
    "                 projected_X_names=[\"Uncertainty\", \"Error\"],\n",
    "                 custom_tooltips=tooltip_s,\n",
    "                 color_function=color_function_output,\n",
    "                 title=\"Confidence Graph for a MLP trained on MNIST\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe src=mapper_visualization_output.html width=100%% height=800 frameBorder=\"0\"></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from kmapper import jupyter\n",
    "jupyter.display(\"mapper_visualization_output.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Image of output\n",
    "![img](https://i.imgur.com/EycZWRR.png)\n",
    "## Link to output\n",
    "http://mlwave.github.io/tda/confidence-graphs.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
